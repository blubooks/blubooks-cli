// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "content.proto" (package "app", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message app.PageTocItem
 */
export interface PageTocItem {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: repeated app.PageTocItem items = 3;
     */
    items: PageTocItem[];
}
/**
 * @generated from protobuf message app.PageContent
 */
export interface PageContent {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string html = 3;
     */
    html: string;
    /**
     * @generated from protobuf field: repeated app.PageTocItem toc = 4;
     */
    toc: PageTocItem[];
}
/**
 * @generated from protobuf message app.Page
 */
export interface Page {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string parent = 3;
     */
    parent: string;
    /**
     * @generated from protobuf field: string parentId = 4;
     */
    parentId: string;
    /**
     * @generated from protobuf field: int32 level = 5;
     */
    level: number;
    /**
     * @generated from protobuf field: string type = 6;
     */
    type: string;
    /**
     * @generated from protobuf field: string link = 7;
     */
    link: string;
    /**
     * @generated from protobuf field: bool extern = 8;
     */
    extern: boolean;
    /**
     * @generated from protobuf field: repeated app.Page pages = 9;
     */
    pages: Page[];
    /**
     * @generated from protobuf field: string data = 10;
     */
    data: string;
    /**
     * @generated from protobuf field: bool show = 20;
     */
    show: boolean;
    /**
     * @generated from protobuf field: bool activeParent = 21;
     */
    activeParent: boolean;
    /**
     * @generated from protobuf field: bool set = 31;
     */
    set: boolean;
    /**
     * @generated from protobuf field: app.Page parentPage = 32;
     */
    parentPage?: Page;
}
/**
 * @generated from protobuf message app.Options
 */
export interface Options {
    /**
     * @generated from protobuf field: bool accordion = 1;
     */
    accordion: boolean;
}
/**
 * @generated from protobuf message app.Navi
 */
export interface Navi {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: repeated app.Page header = 4;
     */
    header: Page[];
    /**
     * @generated from protobuf field: repeated app.Page footer = 5;
     */
    footer: Page[];
    /**
     * @generated from protobuf field: repeated app.Page pages = 6;
     */
    pages: Page[];
    /**
     * @generated from protobuf field: app.Page root = 7;
     */
    root?: Page;
    /**
     * @generated from protobuf field: app.Options options = 8;
     */
    options?: Options;
    /**
     * @generated from protobuf field: string searchId = 9;
     */
    searchId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PageTocItem$Type extends MessageType<PageTocItem> {
    constructor() {
        super("app.PageTocItem", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PageTocItem }
        ]);
    }
    create(value?: PartialMessage<PageTocItem>): PageTocItem {
        const message = { id: "", title: "", items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PageTocItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageTocItem): PageTocItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* repeated app.PageTocItem items */ 3:
                    message.items.push(PageTocItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageTocItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* repeated app.PageTocItem items = 3; */
        for (let i = 0; i < message.items.length; i++)
            PageTocItem.internalBinaryWrite(message.items[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.PageTocItem
 */
export const PageTocItem = new PageTocItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageContent$Type extends MessageType<PageContent> {
    constructor() {
        super("app.PageContent", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "html", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "toc", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PageTocItem }
        ]);
    }
    create(value?: PartialMessage<PageContent>): PageContent {
        const message = { id: "", title: "", html: "", toc: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PageContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageContent): PageContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string html */ 3:
                    message.html = reader.string();
                    break;
                case /* repeated app.PageTocItem toc */ 4:
                    message.toc.push(PageTocItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string html = 3; */
        if (message.html !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.html);
        /* repeated app.PageTocItem toc = 4; */
        for (let i = 0; i < message.toc.length; i++)
            PageTocItem.internalBinaryWrite(message.toc[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.PageContent
 */
export const PageContent = new PageContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Page$Type extends MessageType<Page> {
    constructor() {
        super("app.Page", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "parentId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "extern", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "pages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Page },
            { no: 10, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "show", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "activeParent", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 31, name: "set", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 32, name: "parentPage", kind: "message", T: () => Page }
        ]);
    }
    create(value?: PartialMessage<Page>): Page {
        const message = { id: "", title: "", parent: "", parentId: "", level: 0, type: "", link: "", extern: false, pages: [], data: "", show: false, activeParent: false, set: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Page>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Page): Page {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string parent */ 3:
                    message.parent = reader.string();
                    break;
                case /* string parentId */ 4:
                    message.parentId = reader.string();
                    break;
                case /* int32 level */ 5:
                    message.level = reader.int32();
                    break;
                case /* string type */ 6:
                    message.type = reader.string();
                    break;
                case /* string link */ 7:
                    message.link = reader.string();
                    break;
                case /* bool extern */ 8:
                    message.extern = reader.bool();
                    break;
                case /* repeated app.Page pages */ 9:
                    message.pages.push(Page.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string data */ 10:
                    message.data = reader.string();
                    break;
                case /* bool show */ 20:
                    message.show = reader.bool();
                    break;
                case /* bool activeParent */ 21:
                    message.activeParent = reader.bool();
                    break;
                case /* bool set */ 31:
                    message.set = reader.bool();
                    break;
                case /* app.Page parentPage */ 32:
                    message.parentPage = Page.internalBinaryRead(reader, reader.uint32(), options, message.parentPage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Page, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string parent = 3; */
        if (message.parent !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.parent);
        /* string parentId = 4; */
        if (message.parentId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.parentId);
        /* int32 level = 5; */
        if (message.level !== 0)
            writer.tag(5, WireType.Varint).int32(message.level);
        /* string type = 6; */
        if (message.type !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.type);
        /* string link = 7; */
        if (message.link !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.link);
        /* bool extern = 8; */
        if (message.extern !== false)
            writer.tag(8, WireType.Varint).bool(message.extern);
        /* repeated app.Page pages = 9; */
        for (let i = 0; i < message.pages.length; i++)
            Page.internalBinaryWrite(message.pages[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string data = 10; */
        if (message.data !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.data);
        /* bool show = 20; */
        if (message.show !== false)
            writer.tag(20, WireType.Varint).bool(message.show);
        /* bool activeParent = 21; */
        if (message.activeParent !== false)
            writer.tag(21, WireType.Varint).bool(message.activeParent);
        /* bool set = 31; */
        if (message.set !== false)
            writer.tag(31, WireType.Varint).bool(message.set);
        /* app.Page parentPage = 32; */
        if (message.parentPage)
            Page.internalBinaryWrite(message.parentPage, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.Page
 */
export const Page = new Page$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Options$Type extends MessageType<Options> {
    constructor() {
        super("app.Options", [
            { no: 1, name: "accordion", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Options>): Options {
        const message = { accordion: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Options>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Options): Options {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool accordion */ 1:
                    message.accordion = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool accordion = 1; */
        if (message.accordion !== false)
            writer.tag(1, WireType.Varint).bool(message.accordion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.Options
 */
export const Options = new Options$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Navi$Type extends MessageType<Navi> {
    constructor() {
        super("app.Navi", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "header", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Page },
            { no: 5, name: "footer", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Page },
            { no: 6, name: "pages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Page },
            { no: 7, name: "root", kind: "message", T: () => Page },
            { no: 8, name: "options", kind: "message", T: () => Options },
            { no: 9, name: "searchId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Navi>): Navi {
        const message = { id: "", title: "", description: "", header: [], footer: [], pages: [], searchId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Navi>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Navi): Navi {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* repeated app.Page header */ 4:
                    message.header.push(Page.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated app.Page footer */ 5:
                    message.footer.push(Page.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated app.Page pages */ 6:
                    message.pages.push(Page.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* app.Page root */ 7:
                    message.root = Page.internalBinaryRead(reader, reader.uint32(), options, message.root);
                    break;
                case /* app.Options options */ 8:
                    message.options = Options.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                case /* string searchId */ 9:
                    message.searchId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Navi, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* repeated app.Page header = 4; */
        for (let i = 0; i < message.header.length; i++)
            Page.internalBinaryWrite(message.header[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated app.Page footer = 5; */
        for (let i = 0; i < message.footer.length; i++)
            Page.internalBinaryWrite(message.footer[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated app.Page pages = 6; */
        for (let i = 0; i < message.pages.length; i++)
            Page.internalBinaryWrite(message.pages[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* app.Page root = 7; */
        if (message.root)
            Page.internalBinaryWrite(message.root, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* app.Options options = 8; */
        if (message.options)
            Options.internalBinaryWrite(message.options, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string searchId = 9; */
        if (message.searchId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.searchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.Navi
 */
export const Navi = new Navi$Type();
